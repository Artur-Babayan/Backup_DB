# Generated by Django 3.2.5 on 2022-03-26 07:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('car_code', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('car_name', models.CharField(max_length=255)),
                ('car_type', models.CharField(choices=[('Normal', 'Normal'), ('Tower', 'Tower')], default='', max_length=60)),
            ],
            options={
                'db_table': 'car',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('channel_code', models.IntegerField(primary_key=True, serialize=False)),
                ('channel_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'channel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ColorAdjustment',
            fields=[
                ('color_adjustment_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'color_adjustment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('district', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'district',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GponType',
            fields=[
                ('gpon_type', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gpon_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LanCable',
            fields=[
                ('lan_cable_code', models.IntegerField(primary_key=True, serialize=False)),
                ('lan_cable_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'lan_cable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Muft',
            fields=[
                ('muft_code', models.IntegerField(primary_key=True, serialize=False)),
                ('muft_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'muft',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OpticalCable',
            fields=[
                ('optical_cable_code', models.IntegerField(primary_key=True, serialize=False)),
                ('optical_cable_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'optical_cable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OtherDevice',
            fields=[
                ('other_device_name', models.CharField(max_length=255)),
                ('other_device_code', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'other_device',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('region', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('service_type', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'service_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spliter',
            fields=[
                ('spliter_code', models.IntegerField(primary_key=True, serialize=False)),
                ('spliter_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'spliter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('division', models.CharField(max_length=255)),
                ('team', models.CharField(max_length=255)),
                ('position_en', models.CharField(max_length=255)),
                ('position_type', models.CharField(max_length=255)),
                ('group_type', models.CharField(max_length=255)),
                ('staff_number', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('fullname', models.CharField(max_length=255)),
                ('group_name', models.CharField(max_length=255)),
                ('position_am', models.CharField(max_length=255)),
                ('category', models.CharField(max_length=255)),
                ('level', models.CharField(max_length=255)),
                ('username', models.ForeignKey(blank=True, db_column='username', null=True, on_delete=django.db.models.deletion.CASCADE, to='fond_main.authuser')),
            ],
            options={
                'verbose_name_plural': 'Staff',
                'db_table': 'staff',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StbType',
            fields=[
                ('stb_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stb_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TicketThread',
            fields=[
                ('ticket_thread', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ticket_thread',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('warehouse', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'warehouse',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WifiRouter',
            fields=[
                ('wifi_router_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'wifi_router',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('ticket_id', models.AutoField(primary_key=True, serialize=False)),
                ('ticket_type', models.CharField(choices=[('', ''), ('Measuring', 'Measuring'), ('Servicing', 'Servicing'), ('Constraction', 'Constraction'), ('Welding', 'Welding'), ('Design', 'Design'), ('Connection', 'Connection')], default='l', max_length=60)),
                ('ticket_real_id', models.PositiveIntegerField()),
                ('branch_type', models.CharField(choices=[('', ''), ('B2C', 'B2C'), ('B2B', 'B2B'), ('B2C PS', 'B2C PS')], default='', max_length=60)),
                ('address', models.CharField(max_length=255)),
                ('creation_date', models.DateTimeField()),
                ('tarif_id', models.CharField(max_length=255)),
                ('service_quantity', models.PositiveIntegerField()),
                ('due_date', models.DateTimeField()),
                ('comment', models.CharField(blank=True, max_length=255, null=True)),
                ('performer_group', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20)], null=True)),
                ('performing_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Pending', 'Pending'), ('Config', 'Config'), ('Done', 'Done'), ('Reject', 'Reject')], default='Waiting', max_length=60)),
                ('tower_working_time', models.PositiveIntegerField()),
                ('current_or_capital', models.CharField(blank=True, choices=[('', ''), ('Current', 'Current'), ('Capital', 'Capital')], default='', max_length=60, null=True)),
                ('gpon_qty', models.PositiveIntegerField()),
                ('stb_qty', models.PositiveIntegerField()),
                ('wifi_router_qty', models.PositiveIntegerField()),
                ('other_device_qty', models.PositiveIntegerField()),
                ('points', models.PositiveIntegerField()),
                ('optical_cable_length', models.PositiveIntegerField()),
                ('optical_cable_begin', models.PositiveIntegerField()),
                ('optical_cable_end', models.PositiveIntegerField()),
                ('optical_cable_code', models.PositiveIntegerField()),
                ('demontage_optical_cable_length', models.PositiveIntegerField()),
                ('defected_optical_cable_length', models.PositiveIntegerField()),
                ('lan_cable_length', models.PositiveIntegerField()),
                ('lan_cable_begin', models.PositiveIntegerField()),
                ('lan_cable_end', models.PositiveIntegerField()),
                ('lan_cable_code', models.PositiveIntegerField()),
                ('hdmi_qty', models.PositiveIntegerField()),
                ('remote_control_qty', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('config_date', models.DateTimeField(blank=True, null=True)),
                ('trubka', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True)),
                ('blm_clx', models.CharField(max_length=255)),
                ('service_link_measure', models.CharField(max_length=255)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('car_number', models.ForeignKey(blank=True, db_column='car_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_car', to='fond_main.car')),
                ('channel', models.ForeignKey(blank=True, db_column='channel', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_channel', to='fond_main.channel')),
                ('color_adjustment', models.ForeignKey(blank=True, db_column='color_adjustment', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_color_adj', to='fond_main.coloradjustment')),
                ('configuer_name', models.ForeignKey(blank=True, db_column='configuer_name', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_conf_name', to='fond_main.authuser')),
                ('creator', models.ForeignKey(db_column='creator', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_creator', to='fond_main.authuser')),
                ('defected_optical_cable_type', models.ForeignKey(blank=True, db_column='defected_optical_cable_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_defect_opt_cabel', to='fond_main.opticalcable')),
                ('demontage_optical_cable_type', models.ForeignKey(blank=True, db_column='demontage_optical_cable_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_demon_opt_cabel', to='fond_main.opticalcable')),
                ('district', models.ForeignKey(db_column='district', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_district', to='fond_main.district')),
                ('gpon_type', models.ForeignKey(blank=True, db_column='gpon_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_gpon', to='fond_main.gpontype')),
                ('lan_cable_type', models.ForeignKey(blank=True, db_column='lan_cable_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_lan_cabel', to='fond_main.lancable')),
                ('muft', models.ForeignKey(blank=True, db_column='ticket_muft', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_must', to='fond_main.muft')),
                ('optical_cabel_type', models.ForeignKey(blank=True, db_column='optical_cabel_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_optical_cabel', to='fond_main.opticalcable')),
                ('other_device_type', models.ForeignKey(blank=True, db_column='other_device_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_other_device', to='fond_main.otherdevice')),
                ('performer', models.ForeignKey(db_column='performer', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_performer', to='fond_main.authuser')),
                ('region', models.ForeignKey(db_column='region', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_region', to='fond_main.region')),
                ('service_type', models.ForeignKey(db_column='service_type', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_service', to='fond_main.servicetype')),
                ('spliter', models.ForeignKey(blank=True, db_column='spliter', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_spliter', to='fond_main.spliter')),
                ('stb_type', models.ForeignKey(blank=True, db_column='stb_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_stb', to='fond_main.stbtype')),
                ('technician1', models.ForeignKey(blank=True, db_column='technician1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_technician1', to='fond_main.staff')),
                ('technician2', models.ForeignKey(blank=True, db_column='technician2', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_technician2', to='fond_main.staff')),
                ('technician3', models.ForeignKey(blank=True, db_column='technician3', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_technician3', to='fond_main.staff')),
                ('technician4', models.ForeignKey(blank=True, db_column='technician4', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_technician4', to='fond_main.staff')),
                ('technician5', models.ForeignKey(blank=True, db_column='technician5', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_technician5', to='fond_main.staff')),
                ('ticket_thread_name', models.ForeignKey(db_column='ticket_thread_name', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_thread_name', to='fond_main.ticketthread')),
                ('warehouse', models.ForeignKey(blank=True, db_column='warehouse', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_warehouse', to='fond_main.warehouse')),
                ('wifi_router_type', models.ForeignKey(blank=True, db_column='wifi_router_type', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket_wifi_router', to='fond_main.wifirouter')),
            ],
            options={
                'verbose_name_plural': 'Ticket',
                'db_table': 'ticket',
                'managed': True,
            },
        ),
    ]
